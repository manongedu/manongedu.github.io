<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>千里之行，始于足下</title>
  
  <subtitle>小码农的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.manongedu.cn/"/>
  <updated>2018-05-03T11:50:06.730Z</updated>
  <id>http://www.manongedu.cn/</id>
  
  <author>
    <name>HelloWorld小码农</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript之事件监听解决浏览器兼容性问题</title>
    <link href="http://www.manongedu.cn/JavaScript%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98.html"/>
    <id>http://www.manongedu.cn/JavaScript之事件监听解决浏览器兼容性问题.html</id>
    <published>2018-05-03T11:35:24.000Z</published>
    <updated>2018-05-03T11:50:06.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>在上一篇文章中，我们学习了JavaScript的事件监听，实现了一个Dom对象的同一个事件可以拥有多个事件处理程序。我们针对不同的浏览器，采用了不同的实现方式，但是这样做显然是麻烦的，因为我们要针对不同的浏览器采用不同的方法分别实现，那现在能不能写一个通用的方法，我们只要调用这个通用的方法就自动去解决浏览器的兼容性问题呢？下面就分别实现以下。</p><h1 id="第一种方式：自定义方法解决"><a href="#第一种方式：自定义方法解决" class="headerlink" title="第一种方式：自定义方法解决"></a>第一种方式：自定义方法解决</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="comment">// 添加事件监听，srcObj: 事件源  eventType: 事件类型(约定:类型不包含on前缀) callback: 回调函数</span></span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">addEvent</span><span class="params">(srcObj,eventType,callback)</span></span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">                <span class="comment">// 如果当前的浏览器window对象存在attachEvent属性则表示是IE浏览器</span></span></span><span class="line"><span class="actionscript">                srcObj.attachEvent(<span class="string">'on'</span> + eventType , callback);</span></span><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">                <span class="comment">// 如果不存在则attachEvent属性则表示是非IE浏览器</span></span></span><span class="line"><span class="undefined">                srcObj.addEventListener(eventType,callback);</span></span><span class="line"><span class="undefined">            &#125;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"事件处理程序1"</span>);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn2</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"事件处理程序2"</span>);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="javascript">            <span class="keyword">var</span> divObj = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            addEvent(divObj,<span class="string">'click'</span>,fn1);</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            addEvent(divObj,<span class="string">'click'</span>,fn2)</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    </span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span></span><span class="line">        点击我，测试事件处理程序哪个会被触发</span><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    </span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><h1 id="第二种方式：使用jquery"><a href="#第二种方式：使用jquery" class="headerlink" title="第二种方式：使用jquery"></a>第二种方式：使用jquery</h1><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><p>on(events,[selector],[data],fn)</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>jquery1.7之后使用</p><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"事件处理程序1"</span>);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn2</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"事件处理程序2"</span>);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            <span class="comment">// 获取div元素所对应的对象</span></span></span><span class="line"><span class="javascript">            <span class="keyword">var</span> _divObj = $(<span class="string">"#div"</span>);</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            _divObj.on(<span class="string">'click'</span> , fn1);</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            _divObj.on(<span class="string">'click'</span> , fn2);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    </span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span></span><span class="line">        点击我，测试事件处理程序哪个会被触发</span><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    </span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>至于jquery的js库文件我在这里就不附上了，这里仅仅是最关键的代码哦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;在上一篇文章中，我们学习了JavaScript的事件监听，实现了一个Dom对象的同一个事件可以拥有多个事件处理程序。我们针对不同的浏
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="事件监听" scheme="http://www.manongedu.cn/tags/%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    
      <category term="浏览器兼容性" scheme="http://www.manongedu.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之事件监听</title>
    <link href="http://www.manongedu.cn/JavaScript%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC.html"/>
    <id>http://www.manongedu.cn/JavaScript之事件监听.html</id>
    <published>2018-05-02T12:21:21.000Z</published>
    <updated>2018-05-02T12:40:28.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>在前端开发中，我们经常会对需要的某些事件进行监听，这样只要在指定的元素上触发了此事件，就会有相应事件处理程序得到调用，进而实现我们的一些操作，那么本文主要讲解JavaScript的事件监听。</p><h1 id="问题引入："><a href="#问题引入：" class="headerlink" title="问题引入："></a>问题引入：</h1><p>首先我们来思考一个问题：我们能不能为一个Dom对象的同一个事件指定多个事件处理程序?举个例子，以Div元素为例，意思就是说我们能不能为一个Div元素的click事件添加多个事件处理程序呢，或者说当我们的Div元素的Click事件被触发，是否能同时执行多个事件处理程序呢？<br>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"事件处理程序1"</span>);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn2</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"事件处理程序2"</span>);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="javascript">            <span class="keyword">var</span> divObj = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="undefined">            divObj.onclick = fn1;</span></span><span class="line"><span class="undefined">            divObj.onclick = fn2;</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    </span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span></span><span class="line">        点击我，测试事件处理程序哪个会被触发</span><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    </span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><p>结果：“事件处理程序2”。仅仅是fn2这么一个事件处理程序起了作用,把fn1事件处理程序给替换掉了。其实也这个程序也不难理解，<strong>如果要为一个对象的同一个事件指定多个事件处理程序,那么后面指定的程序会覆盖掉前面的</strong>。</p><h1 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h1><p>如果想为某个对象的某个事件指定多个事件处理程序，可以使用事件监听。比如说，比如说要为div元素的click事件添加多个事件处理程序fn1,fn2那么就必须使用事件监听了。</p><p>事件监听语法：</p><p>方式一：</p><pre><code>语法：    attachEvent(type , callback);说明：    type : 事件名 , 如onclick。     callback : 事件处理程序回调函数。代码如下：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"事件处理程序1"</span>);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn2</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"事件处理程序2"</span>);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="javascript">            <span class="keyword">var</span> divObj = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            divObj.attachEvent(<span class="string">"onclick"</span>,fn1);</span></span><span class="line"><span class="actionscript">            divObj.attachEvent(<span class="string">"onclick"</span>,fn2);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    </span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span></span><span class="line">        点击我，测试事件处理程序哪个会被触发</span><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    </span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><p>方式二：</p><pre><code>语法：    addEventListener(type,callback ,[capture])说明：    type : 事件名，没有on前缀，如click    callback : 事件处理程序    capture : 事件模型，有两种模型(冒泡模型,捕捉模型)，可选参数,默认是false。true : 捕捉模型，false : 冒泡模型代码如下：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"事件处理程序1"</span>);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">fn2</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"事件处理程序2"</span>);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="javascript">            <span class="keyword">var</span> divObj = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            divObj.addEventListener(<span class="string">"click"</span>,fn1);</span></span><span class="line"><span class="actionscript">            divObj.addEventListener(<span class="string">"click"</span>,fn2);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    </span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span></span><span class="line">        点击我，测试事件处理程序哪个会被触发</span><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    </span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><pre><code>注意：    使用addEventListener方式在IE浏览器下是失效的，仅仅是针对chrom、firefox等浏览器有效。</code></pre><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>两种事件监听的区别</p><pre><code>a. 监听方法的不同：    IE : attachEvent    W3C 模型 : addEventListenerb. 监听参数不同:    IE : IE没有模型参数,因为IE的默认就是冒泡模型。    W3C : W3C有模型参数        true : 捕捉模型        false : 冒泡模型c. 触发顺序不同:    IE : IE8及以下的浏览器触发时是先绑定后触发    W3C : W3C浏览器是先绑定先触发d. 事件名称的不同    IE : 事件名需要on前缀    W3C : 事件名不需要on前缀</code></pre><p>到底什么是IE和W3C?</p><p>IE没有去遵循W3C的标准,IE浏览器自己去搞了一套标准，chrome,firefox它们去开发浏览器的时候,就完全的遵循了W3C标准。这个就是为什么IE11及IE12的浏览器和IE10及以下的浏览器不同的原因?这些内核也已经慢慢的要靠标准了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;在前端开发中，我们经常会对需要的某些事件进行监听，这样只要在指定的元素上触发了此事件，就会有相应事件处理程序得到调用，进而实现我们的
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="事件监听" scheme="http://www.manongedu.cn/tags/%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript继承之prototype原型方式</title>
    <link href="http://www.manongedu.cn/JavaScript%E7%BB%A7%E6%89%BF%E4%B9%8Bprototype%E5%8E%9F%E5%9E%8B%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.manongedu.cn/JavaScript继承之prototype原型方式.html</id>
    <published>2018-05-01T11:05:56.000Z</published>
    <updated>2018-05-01T11:19:33.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>本篇文章主要讲解的是JavaScript继承的第四种方式：<strong>使用prototype原型方式</strong>。</p><h1 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h1><p><strong>子类.prototype = new 父类()</strong></p><h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><p>再来回顾一下之前讲到的一个问题：为什么说Object是所有类的父类？是因为在JS系统中，所有类在被加载完毕之后，会自动的去创建类的原型对象，那么这个原型对象又是怎么创建的呢？我们知道这个原型对象是Object类的实例对象，也就是“<strong>类名.prototype = new Object()</strong>”，那么也就是说Object类下面的所有的属性和方法都会被这个原型对象所拥有。比如说，<br>Person.prototype = new Object()，由于Object类下面的所有的属性和方法都会被Person原型对象所拥有，也就是被Person类所拥有，那么就可以说，Object是被Person所继承了。</p><p>那么现在问题来了：我任意的给你两个类A和B，我要实现A继承B，该如何做呢？</p><p>答案其实就是：<strong>A.prototype = new B();</strong></p><h1 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">//  定义父类</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Parent</span><span class="params">(name)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.name);            </span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义子类</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Child</span><span class="params">(password)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.password = password;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.name + <span class="string">" , "</span> + <span class="keyword">this</span>.password);            </span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 实现Child类去继承Parent类</span></span></span><span class="line"><span class="actionscript">    Child.prototype = <span class="keyword">new</span> Parent(<span class="string">"HelloWorld小码农"</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">"123456"</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    child.sayName(); <span class="comment">// HelloWorld小码农</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    child.info(); <span class="comment">// HelloWorld小码农 , 123456</span></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>之所以child可以去调用sayName方法，主要原因是我们已经将Parent的实例对象赋值给了Child的原型对象，而当我们去调用一个实例对象上不存在的属性或方法时(比如child实例对象根本没有sayName方法)，该实例对象就会自动去找该构造函数的原型对象，发现Child的原型对象上是存在sayName方法的，所以是可以调用的。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p>小伙伴们可以参考我的视频：<a href="http://baijiahao.baidu.com/builder/preview/s?id=1597180257815387737" target="_blank" rel="noopener">JavaScript继承之prototype原型方式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;本篇文章主要讲解的是JavaScript继承的第四种方式：&lt;strong&gt;使用prototype原型方式&lt;/strong&gt;。&lt;/p&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="原型" scheme="http://www.manongedu.cn/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="继承" scheme="http://www.manongedu.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript继承之扩展Object类方式</title>
    <link href="http://www.manongedu.cn/JavaScript%E7%BB%A7%E6%89%BF%E4%B9%8B%E6%89%A9%E5%B1%95Object%E7%B1%BB%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.manongedu.cn/JavaScript继承之扩展Object类方式.html</id>
    <published>2018-05-01T02:31:45.000Z</published>
    <updated>2018-05-01T02:51:00.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>本文主要讲解在JavaScript中实现继承的第三种方式：<strong>扩展Object类方式。</strong></p><h1 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.函数名 = <span class="function"><span class="keyword">function</span>(<span class="params">parentObj</span>)</span>&#123;</span><span class="line">    </span><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> parentObj)&#123;</span><span class="line">        <span class="keyword">this</span>[attr] = parentObj[attr];</span><span class="line">    &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h1><p>this[attr] = parentObject[i]中的this，谁调用了这个“函数”，那么这个this就是谁。</p><h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><p>其实通过扩展Object类的方式去实现继承很好理解，为Object类的原型对象添加一个方法，这个方法需要接受一个父类型的实例对象，而我这个方法内部循环的去遍历这个父类型的实例对象，把父类型实例对象中的所有的属性添加到this所指向的对象中，那么就说明了this指向的这个对象也拥有了父类中所有的属性。</p><h1 id="代码实现如下："><a href="#代码实现如下：" class="headerlink" title="代码实现如下："></a>代码实现如下：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义父类</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Parent</span><span class="params">(name)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.name);            </span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义子类</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Child</span><span class="params">(password)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.password = password;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.name + <span class="string">" , "</span> + <span class="keyword">this</span>.password);            </span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 实现继承的语法</span></span></span><span class="line"><span class="javascript">    <span class="built_in">Object</span>.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params">parentObj</span>)</span>&#123;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> parentObj)&#123;</span></span><span class="line"><span class="actionscript">            <span class="keyword">this</span>[attr] = parentObj[attr];</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    &#125; </span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建对象</span></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">"123456"</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    child.show(<span class="keyword">new</span> Parent(<span class="string">"lisi"</span>));</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    child.info(); <span class="comment">// lisi , 123456</span></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>为什么是扩展Object类，通过对Object的原型对象添加属性的方式呢？这个是因为原型链的性质决定的，因为当我们对Object的原型对象添加属性或方法时，我们所创建的任何的实例对象都可以拥有此属性和方法。所以这里child实例对象是可以调用show方法的。</li><li>这种方式实际上就是循环遍历父类型的实例对象中的所有的属性和方法然后添加到子类的实例对象中，那么实例对象也就拥有了父对象中所有的属性和方法，就相当于是继承了下来</li></ol><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p>如有疑问，请参考我的视频：<a href="http://baijiahao.baidu.com/builder/preview/s?id=1597096093608289523" target="_blank" rel="noopener">JavaScript继承之扩展Object类方式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;本文主要讲解在JavaScript中实现继承的第三种方式：&lt;strong&gt;扩展Object类方式。&lt;/strong&gt;&lt;/p&gt;
&lt;h1
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="继承" scheme="http://www.manongedu.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="Object" scheme="http://www.manongedu.cn/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript继承之call或apply方式</title>
    <link href="http://www.manongedu.cn/JavaScript%E7%BB%A7%E6%89%BF%E4%B9%8Bcall%E6%88%96apply%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.manongedu.cn/JavaScript继承之call或apply方式.html</id>
    <published>2018-04-30T02:07:17.000Z</published>
    <updated>2018-04-30T02:20:45.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>在之前的博文<a href="https://www.manongedu.cn/JavaScript%E9%AB%98%E7%BA%A7%E4%B9%8Bcall%E5%92%8Capply%E7%9A%84%E4%BD%BF%E7%94%A8.html">JavaScript高级之call和apply的使用</a>中有讲到，call和apply的本质是：<strong>该变一个函数内部this的指向</strong>。好啦，知道了这一点，我们就使用call和apply的方式去实现JavaScript中的继承问题。</p><h1 id="直接上代码："><a href="#直接上代码：" class="headerlink" title="直接上代码："></a>直接上代码：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义父类</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Parent</span><span class="params">(name)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.name);   </span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义子类</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Child</span><span class="params">(name,password)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.passsword = passsword;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.password);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="comment">// 此句代码就实现了继承</span></span></span><span class="line"><span class="actionscript">        Parent.call(<span class="keyword">this</span>,name);</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建对象</span></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> parent = <span class="keyword">new</span> Parent(<span class="string">"zhangsan"</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">"lisi"</span> , <span class="string">"123"</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    parent.sayName(); <span class="comment">// zhangsan</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    child.info();    <span class="comment">//  123</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    child.sayName(); <span class="comment">// lisi</span></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p><strong>使用call或apply这种方式，本质上其实和第一种实现方式是一样的，都是利用了this。</strong></p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p>具体对于call和apply的使用，请参考我的博文和视频：</p><p>博文：<a href="https://www.manongedu.cn/JavaScript%E9%AB%98%E7%BA%A7%E4%B9%8Bcall%E5%92%8Capply%E7%9A%84%E4%BD%BF%E7%94%A8.html">JavaScript高级之call和apply的使用</a></p><p>视频：<a href="http://baijiahao.baidu.com/builder/preview/s?id=1597278267456082277" target="_blank" rel="noopener">JavaScript继承之apply方式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;在之前的博文&lt;a href=&quot;https://www.manongedu.cn/JavaScript%E9%AB%98%E7%BA%
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="继承" scheme="http://www.manongedu.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="call" scheme="http://www.manongedu.cn/tags/call/"/>
    
      <category term="apply" scheme="http://www.manongedu.cn/tags/apply/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript继承之对象冒充</title>
    <link href="http://www.manongedu.cn/JavaScript%E7%BB%A7%E6%89%BF%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%86%92%E5%85%85.html"/>
    <id>http://www.manongedu.cn/JavaScript继承之对象冒充.html</id>
    <published>2018-04-29T07:00:42.000Z</published>
    <updated>2018-04-29T07:29:14.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>JavaScript是一门面向对象的编程语言，自然少不了面向对象中的继承的特性，本文主要就是讲解继承的第一种实现方式：<strong>对象冒充</strong>。</p><h1 id="学习前提："><a href="#学习前提：" class="headerlink" title="学习前提："></a>学习前提：</h1><p>使用对象冒充的方式实现继承，就必须要深入掌握this的用法。</p><h1 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义父类</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Parent</span><span class="params">(name)</span></span>&#123;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.username);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义子类</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Child</span><span class="params">(name,password)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.method = Parent;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.method(name);</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.password = password;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.name + <span class="string">" ,"</span> + <span class="keyword">this</span>.password);            </span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">delete</span> method;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建父类</span></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> parent = <span class="keyword">new</span> Parent(<span class="string">"zhangsan"</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建子类</span></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">"lisi"</span> , <span class="string">"123456"</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    parent.sayName();       <span class="comment">// zhangsan</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    child.sayName();        <span class="comment">// lisi </span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    child.info();           <span class="comment">// lisi , 123456</span></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h2 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h2><p>通过程序运行发现，child.sayName()居然打印出来了结果，可是child实例对象并没有sayName方法呀，而这个sayName方法是定义在了父类Parent上，这样就相当于子类Child把父类Parent中的方法给继承了下来。为什么会这样？</p><h2 id="原因解释："><a href="#原因解释：" class="headerlink" title="原因解释："></a>原因解释：</h2><p>原因在于子类Child的定义上，可以看到，在Child函数内部，为Child定义了一个method属性，而这个method属性又指向了Parent函数(也就是说method属性实际上是一个方法)，然后又去调用了这个method方法(实际是调用了Parent函数)，好了，原因就出在了这里，当我通过this.method(name)执行的时候，这个this本身指的是Child的实例对象，但是实际上是调用的Parent函数，那么对于Parent函数来说，Parent函数内部的this又该是谁呢？<strong>难道是Parent的实例对象吗？答案显然不是的，因为我们说函数内部的this具体是指向谁，是由这个函数到底是由哪个对象来去调用，那么现在显然是通过Child的实例对象来去调用的，所以实际上Parent函数中的this实际上是this.method(name)这句代码中的this，而这个代码中的this确确实实是Child的实例对象。通过调用this.method(name)就相当于为Child实例对象也添加了一个sayName方法，那么理所应当的Child实例对象当然可以调用sayName方法了</strong>。在这里还要强调一句，delete this.method这句代码也是必不可少的，因为当我们使用sayName完毕之后，这个method属性其实就没有存在的必要了。</p><p>更多详细解释，请参考我的视频：<a href="http://baijiahao.baidu.com/builder/preview/s?id=1597008085820347254" target="_blank" rel="noopener">JavaScript继承之对象冒充方式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;JavaScript是一门面向对象的编程语言，自然少不了面向对象中的继承的特性，本文主要就是讲解继承的第一种实现方式：&lt;strong
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="继承" scheme="http://www.manongedu.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="对象冒充" scheme="http://www.manongedu.cn/tags/%E5%AF%B9%E8%B1%A1%E5%86%92%E5%85%85/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级之call和apply的使用</title>
    <link href="http://www.manongedu.cn/JavaScript%E9%AB%98%E7%BA%A7%E4%B9%8Bcall%E5%92%8Capply%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>http://www.manongedu.cn/JavaScript高级之call和apply的使用.html</id>
    <published>2018-04-28T09:08:31.000Z</published>
    <updated>2018-04-28T14:58:56.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>本文主要讲解在JavaScript中this的第四种用法，其实也就是讲解call和apply的使用,事实上，call和apply的使用于this有着密切的关系。在讲解之前，我们首先来去看一段代码，思考一下在JavaScript中，函数的调用形式有几种，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = <span class="string">"HelloWorld小码农"</span>;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><ol><li><p>直接调用</p><p> Person(); 此种调用方式中，函数内部的this指向window。</p></li><li><p>构造函数的形式调用</p><p> var person = new Person(); 函数内部的this指向的是person对象。</p></li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>实际上，函数内部的this都是代表当前对象，只不过是JavaScript中函数内部的this会随着程序而指向不同的对象。</p><h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><p><strong>我们能不能手动修改this的指向呢？</strong></p><p>答案：是可以的，使用call或apply</p><h2 id="主题引入："><a href="#主题引入：" class="headerlink" title="主题引入："></a>主题引入：</h2><p><strong>call或apply的作用：改变函数内部this的指向。</strong></p><h1 id="由代码引发的思考："><a href="#由代码引发的思考：" class="headerlink" title="由代码引发的思考："></a>由代码引发的思考：</h1><p>首先去看第一个程序，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.name + <span class="string">" , "</span> + <span class="keyword">this</span>.age);</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lisi'</span> , <span class="number">60</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h2 id="问题：-1"><a href="#问题：-1" class="headerlink" title="问题："></a>问题：</h2><p>我现在想借用这个info方法来去实现对p1对象的打印，该怎么做？</p><ol><li>方案一：直接调用info函数，即info(); 通过上一篇博文对this的讲解，肯定不行，因为这样调用的话，info函数内部的this其实指的是window。</li><li>方案二：通过对象调用，即p1.info(); 其实也不行，因为p1对象压根就没有info()方法，p1对象只有name和age属性。</li></ol><h2 id="尝试解决："><a href="#尝试解决：" class="headerlink" title="尝试解决："></a>尝试解决：</h2><p>继续看第二个程序，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.name + <span class="string">" , "</span> + <span class="keyword">this</span>.age);</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lisi'</span> , <span class="number">50</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    p1.show = info;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    p1.show();   <span class="comment">// lisi , 50</span></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p>通过代码可以发现，我们通过向p1对象添加了一个show属性，而这个show属性的值其实是一个函数的地址，是一个函数对象，然后通过p1.show()就可以实现打印了。此种方法确实可以实现该功能，但是这种是<strong>通过对p1对象添加属性完成的，如果仍有类似的需求，是不是都要向p1对象添加属性来完成需求呢，这样既会导致p1对象的占用空间越来越大，所以此种方式并不优雅。</strong></p><h2 id="问题思考："><a href="#问题思考：" class="headerlink" title="问题思考："></a>问题思考：</h2><p>针对上面的问题，本质上就是想通过修改info()函数内部的this指针的问题来完成对当前对象的一个打印，那么我们可不可以在不增加属性的方式上来完成功能呢？那么这个时候就使用到了今天要讲的call或apply.</p><h1 id="call或apply的使用："><a href="#call或apply的使用：" class="headerlink" title="call或apply的使用："></a>call或apply的使用：</h1><ol><li><p>功能：</p><p> <strong>使用指定的对象调用当前函数。</strong></p></li><li><p>语法：</p><p> call([thisObj[,arg1[, arg2[, [,.argN]]]]])</p><p> apply(thisObj[,argArray])</p></li><li><p>说明：</p><p> <1> <strong>两个方法的功能完全一样，唯一区别就是参数</strong>。对于第一个参数来说thisObj，作用是一样的，用作代表当前对象的对象，说白了就表示的是函数执行时，this指向谁。<br>对于第二个参数，apply要求传入的是一个参数数组，也就是说将一系列参数组成一个数组传入，而对于call来说，散列的的参数值的方式传入。</1></p><p> <2> 这两个方法都是Function对象中的方法，因为我们定义的每个对象都拥有该方法。</2></p><p> <3> call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象，如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。</3></p></li></ol><h2 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h2><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.name + <span class="string">" , "</span> + <span class="keyword">this</span>.age);</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lisi'</span> , <span class="number">50</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    info.call(p1);</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p>上面的代码就解决了问题，分析：就是说，当在函数中调用call方法时，函数内部的this会自动指向call方法中的第一个参数。上面的例子中，当执行info.call(p1)时，info函数内部的this则会自动指向p1对象，所以当然就可以call这种方式来完成对p1对象的打印。</p><p>好啦，看懂了吗？下一篇我们通过一个复杂的例子对call或apply继续做个案例分析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;本文主要讲解在JavaScript中this的第四种用法，其实也就是讲解call和apply的使用,事实上，call和apply的使
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="call" scheme="http://www.manongedu.cn/tags/call/"/>
    
      <category term="apply" scheme="http://www.manongedu.cn/tags/apply/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级之this详解</title>
    <link href="http://www.manongedu.cn/JavaScript%E9%AB%98%E7%BA%A7%E4%B9%8Bthis%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://www.manongedu.cn/JavaScript高级之this详解.html</id>
    <published>2018-04-27T13:19:51.000Z</published>
    <updated>2018-04-27T13:59:43.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>相信我们在学习JavaScript的时候，关键字this一定是不陌生的，但是对于this的学习和掌握往往对初学者来说是有点晕乎的。事实上在Java中也有this这个概念，但是Java中的this指的是当前对象的引用。不同于JavaScript的是，JavaScript中的this不是固定不变的，而是随着它执行环境的改变而改变。本文主要来去讲解this的用法。JavaScript中的this有四种用法，分别是：</p><ol><li>this在函数中使用</li><li>this在构造函数中使用</li><li>在对象的方法中调用</li><li>在call或apply中使用</li></ol><p>本文主要讲解前三种，至于第四种用法，留到下一篇作为一个专题来说下。</p><h1 id="1、this在函数中调用"><a href="#1、this在函数中调用" class="headerlink" title="1、this在函数中调用"></a>1、this在函数中调用</h1><p>在这种方式中，我也将此种方式称之为“<strong>全局性的函数</strong>”。代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义一个函数</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = <span class="string">"HelloWorld"</span>;        </span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 调用此函数</span></span></span><span class="line"><span class="undefined">    test();</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">    alert(<span class="keyword">this</span>.name);       <span class="comment">// HelloWorld</span></span></span><span class="line"><span class="javascript">    alert(<span class="built_in">window</span>.name);     <span class="comment">// HelloWorld</span></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p>通过运行结果可以发现，函数test()内部中的this就是指的全局对象window。为了充分证明这个结论没错，再来看个例子:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> name = <span class="string">"JSP"</span>;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义一个函数</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = <span class="string">"Tomcat"</span>;        </span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 调用此函数</span></span></span><span class="line"><span class="undefined">    test();</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">    alert(<span class="keyword">this</span>.name);       <span class="comment">// Tomcat</span></span></span><span class="line"><span class="javascript">    alert(<span class="built_in">window</span>.name);     <span class="comment">// Tomcat</span></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p>通过结果就更加确定了，在函数test()内部把全局变量的name的值给修改了，因为这个函数内部的this就是指的是window。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><strong>对于全局性的函数调用，函数内部的this其实就是指向的是window。</strong></p><h1 id="2、this在构造函数中使用："><a href="#2、this在构造函数中使用：" class="headerlink" title="2、this在构造函数中使用："></a>2、this在构造函数中使用：</h1><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> name = <span class="string">"Tomcat"</span>;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义一个构造函数</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = <span class="string">"HelloWorld,小码农"</span>;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span></span><span class="line"><span class="actionscript">    alert(p1.name);  <span class="comment">//  HelloWorld,程序小码农</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="javascript">    alert(<span class="built_in">window</span>.name); <span class="comment">// Tomcat</span></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p>通过结果发现，我通过new关键字创建一个对象的实例，可以发现new关键字改变了this的指向，将这个this指向了对象Person。所以在函数内部对name变量赋值为”HelloWorld,小码农” 并没有改变全局变量name的值。</p><h2 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h2><p><strong>声明一个构造函数的实例对象时，构造函数内部的this都会指向新的实例对象，或者说，构造函数内部的this指向的是新创建的对象本身。</strong></p><h1 id="3、在对象的方法中调用"><a href="#3、在对象的方法中调用" class="headerlink" title="3、在对象的方法中调用"></a>3、在对象的方法中调用</h1><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> name = <span class="string">"HelloWorld"</span>;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> person = &#123;</span></span><span class="line"><span class="actionscript">        <span class="string">"name"</span> : <span class="string">"Tomcat"</span>,</span></span><span class="line"><span class="actionscript">        <span class="string">"age"</span> : <span class="number">30</span>,</span></span><span class="line"><span class="actionscript">        <span class="string">"info"</span> : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.name + <span class="string">","</span> + <span class="keyword">this</span>.age);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">    &#125;;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    person.info();</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>当person对象调用info方法时，info函数内部的this就是指向的person对象。即：<strong>当this出现在对象的方法中时，那么函数内部的this就是指向的这个对象本身。</strong></p><p>本篇就是this在上述方法中的讲解，第四种方式我留到下一篇专题讲解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;相信我们在学习JavaScript的时候，关键字this一定是不陌生的，但是对于this的学习和掌握往往对初学者来说是有点晕乎的。事
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="this" scheme="http://www.manongedu.cn/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript创建对象之动态原型方式</title>
    <link href="http://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8A%A8%E6%80%81%E5%8E%9F%E5%9E%8B%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.manongedu.cn/JavaScript创建对象之动态原型方式.html</id>
    <published>2018-04-26T14:07:23.000Z</published>
    <updated>2018-04-26T14:25:09.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>在我的上一篇的<a href="https://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8E%9F%E5%9E%8B%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%84%E5%90%88%E6%96%B9%E5%BC%8F.html">JavaScript创建对象之原型和构造函数组合的方式</a>一篇博文中，我讲到了使用原型和构造函数的组合一起去创建对象，使用构造函数的目的是解决了实例对象的属性不被共享的问题，使用原型的方式解决了实例对象来去共享方法，但是这样做，还是有个不好的地方，就是属性和方法是分离的，那么我们能否想一种办法使属性和方法封装起来呢？答案是肯定的，这个就是本篇文章要讲的内容：动态原型方式。</p><h1 id="解决思路："><a href="#解决思路：" class="headerlink" title="解决思路："></a>解决思路：</h1><p><strong>在构造函数中通过标志变量让所有对象共享一个方法，而每个对象拥有自己的属性。</strong></p><h1 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义Person构造函数</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(username,age)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.username = username;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">if</span>(<span class="keyword">typeof</span> Person.flag == <span class="string">'undefined'</span>)&#123;</span></span><span class="line"><span class="actionscript">            Person.prototype.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">                alert(<span class="keyword">this</span>.username + <span class="string">","</span> + <span class="keyword">this</span>.age);</span></span><span class="line"><span class="undefined">            &#125;</span></span><span class="line"><span class="actionscript">            Person.flag = <span class="literal">true</span>;</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建对象</span></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">20</span>);</span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'lisi'</span>,<span class="number">90</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    p1.info();  <span class="comment">// zhangsan , 20</span></span></span><span class="line"><span class="actionscript">    p2.info();  <span class="comment">// lisi , 90</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h1 id="代码解析："><a href="#代码解析：" class="headerlink" title="代码解析："></a>代码解析：</h1><p>构造函数中的if判断是为了校验是否是第一次执行Person函数，如果是第一次执行Person函数，那么if语句中的typeof Person.flag的值必为undefined，那么就给Person构造函数的原<br>型对象添加info函数，同时把flag标记变量置为true，如果不是第一次执行，那么typeof Person.flag 的值肯定就不再是undefined，那么就表明Person原型对象中已经有了info函数，<br>那么就不会再去向Person原型对象中添加info函数了。</p><h1 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h1><p>使用动态原型方式创建对象，既解决了创建对象，又解决了实现了将属性和方法封装在同一个函数里，更好的实现了面向对象的封装性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h1&gt;&lt;p&gt;在我的上一篇的&lt;a href=&quot;https://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%B
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="动态原型" scheme="http://www.manongedu.cn/tags/%E5%8A%A8%E6%80%81%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript创建对象之原型和构造函数组合方式</title>
    <link href="http://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8E%9F%E5%9E%8B%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%84%E5%90%88%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.manongedu.cn/JavaScript创建对象之原型和构造函数组合方式.html</id>
    <published>2018-04-25T13:07:33.000Z</published>
    <updated>2018-04-25T13:26:27.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>在上一篇<a href="https://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8Bprototype%E5%8E%9F%E5%9E%8B%E6%96%B9%E5%BC%8F.html">JavaScript创建对象之原型方式</a>及<a href="https://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%96%B9%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98%E7%82%B9.html">JavaScript创建对象之原型方式问题点</a>中，我主要总结了两点：</p><p>1、<strong>单纯的使用原型方式虽然也可以创建对象，但是问题是属性都是对象所共享的，没有私有属性了，而且一个对象对该属性的改变有也会导致其他对象对属性的改变。</strong></p><p>2、<strong>单纯的使用原型方式去构造一个类，虽然解决了多个实例对象共享方法的问题，但是无法像类似于构造函数的方式为属性赋初值，只能在对象生成之后再去改变属性的值。</strong></p><p>本文的主要目的就是用来解决这两个问题。</p><h1 id="解决问题的思路："><a href="#解决问题的思路：" class="headerlink" title="解决问题的思路："></a>解决问题的思路：</h1><p>我们可以把对象的私有属性用构造函数实现，方法使用原型来实现，这样就实现了对象之间的属性互不干扰，同时各个对象共享同一个方法。</p><h1 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义Person构造函数</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(arrs,age)</span></span>&#123;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.arrs = arrs;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 向Person原型对象添加info方法</span></span></span><span class="line"><span class="actionscript">    Person.prototype.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.arrs + <span class="string">","</span> + <span class="keyword">this</span>.age);        </span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person([<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>],<span class="number">30</span>);</span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person([<span class="string">'HelloWorld小码农'</span>],<span class="number">20</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    p1.info();      <span class="comment">// zhangsan , lisi , 30</span></span></span><span class="line"><span class="actionscript">    p2.info();      <span class="comment">// HelloWorld小码农 , 20</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    p1.arrs.push(<span class="string">"Java"</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    p1.info();      <span class="comment">// zhangsan , lisi , Java  , 30</span></span></span><span class="line"><span class="actionscript">    p2.info();      <span class="comment">// HelloWorld小码农 , 20</span></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>通过上面的代码实现，可以看到，通过构造函数的方式，使得创建的p1和p2两个对象的属性是各自私有的，不会因为其中一个对象的属性的改变而影响其他对象，同时又通过原型的方式<br>使得创建的对象p1和p2共享info方法。至此，使用构造函数+原型的方式去创建对象结合了构造函数方式和原型方式的优点，又摒弃了这两种方式的缺点，实现了对象之间属性的互不干扰，<br>各个对象共享同一个方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;在上一篇&lt;a href=&quot;https://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="原型" scheme="http://www.manongedu.cn/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="构造函数" scheme="http://www.manongedu.cn/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript创建对象之原型方式的问题点</title>
    <link href="http://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%96%B9%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98%E7%82%B9.html"/>
    <id>http://www.manongedu.cn/JavaScript创建对象之原型方式的问题点.html</id>
    <published>2018-04-24T14:21:51.000Z</published>
    <updated>2018-04-24T14:59:24.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>在上一篇中，讲到了<a href="https://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8Bprototype%E5%8E%9F%E5%9E%8B%E6%96%B9%E5%BC%8F.html">JavaScript创建对象之原型方式</a>,相对大家对通过原型方式创建对象有已经掌握了，但是文章最后说到这种方式其实是存在一个问题，那么今天就来探讨下这个问题。</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义构造函数</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 通过Person原型对象添加属性和方法</span></span></span><span class="line"><span class="javascript">    Person.prototype.arrs = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><span class="line"><span class="actionscript">    Person.prototype.password = <span class="string">"123"</span>;</span></span><span class="line"><span class="actionscript">    Person.prototype.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.arrs + <span class="string">","</span> + <span class="keyword">this</span>.password);</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建对象</span></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    p1.arrs.push(<span class="string">"HelloWorld"</span>);</span></span><span class="line"><span class="actionscript">    p1.password = <span class="string">"123456"</span>;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    p1.info(); <span class="comment">// HelloWorld,123456</span></span></span><span class="line"><span class="actionscript">    p2.info(); <span class="comment">// HelloWorld,123</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    p2.arrs.push(<span class="string">"Tomcat"</span>);</span></span><span class="line"><span class="actionscript">    p2.info();  <span class="comment">// HelloWorld,Tomcat,123</span></span></span><span class="line"><span class="actionscript">    p1.info();  <span class="comment">// HelloWorld,Tomcat,123456</span></span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>代码解析：</strong> 大家应该看出问题来了，我单单的是对p1对象的arrs属性push了一个HelloWorld,发现p2对象的arrs属性也有了HelloWorld。我对p2对象增加了Tomcat,发现对p1对象的arrs<br>属性也增加了Tomcat。</p><p><strong>问题总结：使用原型方式创建对象，那么生成的所有对象会共享原型中的属性，这样一个对象对某个属性的改变也会反应到其他对象当中。</strong></p><h1 id="问题改进说明"><a href="#问题改进说明" class="headerlink" title="问题改进说明"></a>问题改进说明</h1><p>现在再来思考一个问题，我们现在使用的这种原型方式去创建对象其实有个不好的地方：<strong>单纯的使用原型方式去构造一个类，虽然解决了多个实例对象共享方法的问题，但是无法像类似于构造函数的方式为属性赋初值，只能在对象生成之后再去改变属性的值</strong>。</p><p>问题的改进说明我留到下一篇博文中去深入讲述。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;在上一篇中，讲到了&lt;a href=&quot;https://www.manongedu.cn/JavaScript%E5%88%9B%E5%
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="原型" scheme="http://www.manongedu.cn/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="prototype" scheme="http://www.manongedu.cn/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript创建对象之prototype原型方式</title>
    <link href="http://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8Bprototype%E5%8E%9F%E5%9E%8B%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.manongedu.cn/JavaScript创建对象之prototype原型方式.html</id>
    <published>2018-04-23T15:40:45.000Z</published>
    <updated>2018-04-23T16:13:01.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>问题引入：使用工厂方式和构造函数方式创建对象都存在一个问题，就是如果存在很多的实例对象，那么每个实例对象内部都会有一份函数对象，也就是说每个函数均会占用一份内存空间，造成内存泄露，这样显然是没有必要的，以我之前的博文为例，参考：<a href="https://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%96%B9%E5%BC%8F.html">JavaScript创建对象之构造函数方式</a>，因为这个info函数所完成的功能是一样的。那有的小朋友会说，不是都解决了嘛，我们可以<strong>把函数都设计成全局的函数</strong>，那么这样的话，不就实现了多个实例对象共享同一个方法了吗？这样做其实也是可以的，但是带来的问题主要有两点：</p><p>1、破坏了函数对象的封装性，属性和方法分离了。</p><p>2、如果一个对象里面有大量的方法，难道这些方法都要设计成全局函数不成。</p><h1 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h1><p><strong>使用原型方式</strong></p><h1 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建一个构造函数</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 向Person原型对象添加name属性和info方法</span></span></span><span class="line"><span class="actionscript">    Person.prototype.name = <span class="string">"zhangsan"</span>;</span></span><span class="line"><span class="actionscript">    Person.prototype.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.name);</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建对象</span></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span></span><span class="line"><span class="actionscript">    p1.info();   <span class="comment">// zhangsan</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</span></span><span class="line"><span class="actionscript">    p2.info();  <span class="comment">//  zhangsan</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    p2.name = <span class="string">"lisi"</span>;</span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p3 = <span class="keyword">new</span> Person();</span></span><span class="line"><span class="actionscript">    p2.info(); <span class="comment">// lisi</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    p3.info(); <span class="comment">// zhangsan</span></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>代码解释:</strong></p><p>实例对象在访问方法或属性时，优先是搜索自己的属性和方法，如果自己的属性和方法没有找到，则再去搜索原型的属性和方法，如果原型中也没有找到，就去原型对象的原型中搜索，一直沿着原型这条链搜索，直到找到为止，如果没有找到，则就会出现undefined，上面的代码中<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">p2<span class="selector-class">.name</span> = <span class="string">"lisi"</span></span></pre></td></tr></table></figure></p><p>实际上是给p2对象添加了一个自己的属性为name，所以才会输出“lisi”。如果这一块有不懂的地方，朋友可以参考我的视频.</p><p><a href="http://baijiahao.baidu.com/builder/preview/s?id=1596423769929725910" target="_blank" rel="noopener">JavaScript之prototype深入讲解</a></p><p><a href="http://baijiahao.baidu.com/builder/preview/s?id=1596470301079974341" target="_blank" rel="noopener">JavaScript之prototype原型继承深入讲解</a></p><p><a href="http://baijiahao.baidu.com/builder/preview/s?id=1596553422199972973" target="_blank" rel="noopener">JavaScript之prototype原型链深入讲解</a></p><hr><p>注意：此种方式仍然是有缺陷的，我会在下一篇博文中进行阐述。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;问题引入：使用工厂方式和构造函数方式创建对象都存在一个问题，就是如果存在很多的实例对象，那么每个实例对象内部都会有一份函数对象，也就是说每个
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
      <category term="prototype" scheme="http://www.manongedu.cn/categories/JavaScript/prototype/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="原型" scheme="http://www.manongedu.cn/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="prototype" scheme="http://www.manongedu.cn/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript创建对象之构造函数方式</title>
    <link href="http://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.manongedu.cn/JavaScript创建对象之构造函数方式.html</id>
    <published>2018-04-23T15:16:08.000Z</published>
    <updated>2018-04-23T15:34:23.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>事实上，在上一篇我讲到了使用Object构造函数去创建对象，本篇主要讲解使用自定义构造函数去创建对象。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义Person构造函数</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(username,age)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        **<span class="comment">// js引擎在执行第一行代码之前,js引擎会生成一个对象,这个对象就是this**</span></span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.username = username;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.username + <span class="string">","</span> + <span class="keyword">this</span>.age);   </span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        **<span class="comment">// 注意是不用显式的去写return语句的,此处实际会有一个隐藏的return,作用是将之前生成的对象返回**</span></span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 通过Person构造函数去创建对象</span></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"lisi"</span>,<span class="string">"123456"</span>);</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    p1.info();</span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h1 id="代码解析-new关键字的作用"><a href="#代码解析-new关键字的作用" class="headerlink" title="代码解析,new关键字的作用"></a>代码解析,new关键字的作用</h1><p>创建Person实例对象的时候在外部使用到了“new”操作符。这种调用方式实际上经历了四个步骤，分别是：</p><p>1、创建一个新的实例对象</p><p>2、将构造函数的作用域赋给新对象(因此this就指向了这个新的对象)</p><p>3、指向构造函数中的代码(为这个新的实例对象添加属性)</p><p>4、返回新对象的地址。</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>1、通过构造函数的方式去创建对象，在构造函数的内部，我们是不用写return语句的，但是实际上是存在的一个隐含的return语句，作用就是将之前的生成的对象返回。</p><p>2、通过构造函数的方式去创建对象依然存在对象方法重复占用的问题，以本例为例，定义在Person构造函数中的info方法不是多个实例对象共享的，换句话说就是每个实例对象都会有info方法，和工厂方法创建对象时一样的问题。解决办法是一样的，就是把info函数设计成一个全局的函数，代码的改造和工厂方式创建对象时候改造是一样的。</p><p>具体请参考我上一篇的博文：<a href="https://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E5%BC%8F.html">JavaScript创建对象之工厂方式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;事实上，在上一篇我讲到了使用Object构造函数去创建对象，本篇主要讲解使用自定义构造函数去创建对象。&lt;/p&gt;
&lt;h1 id=&quot;代码
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="构造函数" scheme="http://www.manongedu.cn/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="面向对象" scheme="http://www.manongedu.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript创建对象之工厂方式</title>
    <link href="http://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.manongedu.cn/JavaScript创建对象之工厂方式.html</id>
    <published>2018-04-22T09:15:26.000Z</published>
    <updated>2018-04-22T09:40:20.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>工厂设计模式是软件领域中使用最为广泛的一种设计模式，本篇主要讲解的是工厂模式来去创建对象。</p><h1 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义一个工厂,这个工厂的功能是用来去创建Peron对象</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createPerson</span><span class="params">(username,age)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="comment">// 创建一个对象</span></span></span><span class="line"><span class="javascript">        <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="undefined">        person.username = username;</span></span><span class="line"><span class="undefined">        person.age = age;</span></span><span class="line"><span class="actionscript">        person.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="undefined">            </span></span><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.username + <span class="string">","</span> + <span class="keyword">this</span>.age);</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">return</span> person;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建对象</span></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = createPerson(<span class="string">"zhangsan"</span> , <span class="number">30</span>);</span></span><span class="line"><span class="undefined">    p1.info();</span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>优点：工厂模式解决了如果要创建多个对象代码重复性的问题。</p><p>缺点：如果多次调用createPerson()函数，那么每个实例对象内部都会有一个info函数对象，说白了，这个info函数在每个实例对象中都会有一份，而不是所有的实例对象所共享info函数对象，这个就意味着每个实例对象都会占用一份函数的内存，造成内存的浪费。tips:面向对象中，属性是实例每个对象所有拥有的，而函数是每个实例对象所共享的。</p><h1 id="代码改进："><a href="#代码改进：" class="headerlink" title="代码改进："></a>代码改进：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 定义一个工厂,这个工厂的功能是用来去创建Peron对象</span></span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createPerson</span><span class="params">(username,age)</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="comment">// 创建一个对象</span></span></span><span class="line"><span class="javascript">        <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="undefined">        person.username = username;</span></span><span class="line"><span class="undefined">        person.age = age;</span></span><span class="line"><span class="undefined">        person.info = info;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        <span class="keyword">return</span> person;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="actionscript">         alert(<span class="keyword">this</span>.username + <span class="string">","</span> + <span class="keyword">this</span>.age);</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建对象</span></span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> p1 = createPerson(<span class="string">"zhangsan"</span> , <span class="number">30</span>);</span></span><span class="line"><span class="undefined">    p1.info();</span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><h1 id="解决问题思路："><a href="#解决问题思路：" class="headerlink" title="解决问题思路："></a>解决问题思路：</h1><p>把info函数设计成了一个全局的函数，这样的话，在createPerson()函数内部的info属性就指向了这个info函数的一个指针，因此就可以实现obj1实例对象和obj2实例对象共享同一个info方法。</p><h1 id="产生新的问题："><a href="#产生新的问题：" class="headerlink" title="产生新的问题："></a>产生新的问题：</h1><p>如果对象里面需要定义很多方法，那么就意味着要定义很多的全局函数，为了解决这个问题，就使用到了原型方式。(下一篇讲解喽)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;工厂设计模式是软件领域中使用最为广泛的一种设计模式，本篇主要讲解的是工厂模式来去创建对象。&lt;/p&gt;
&lt;h1 id=&quot;代码实现：&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="工厂模式" scheme="http://www.manongedu.cn/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript创建对象之Object构造函数方式</title>
    <link href="http://www.manongedu.cn/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E4%B9%8BObject%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%96%B9%E5%BC%8F.html"/>
    <id>http://www.manongedu.cn/JavaScript创建对象之Object构造函数方式.html</id>
    <published>2018-04-22T08:34:45.000Z</published>
    <updated>2018-04-22T08:58:20.953Z</updated>
    
    <content type="html"><![CDATA[<p>前言：</p><p>JavaScript是一门面向对象的语言，自然呢就会不可避免的去创建对象，我呢会讲六种方式，本文主要讲解的是使用Object构造函数的方式创建对象。</p><p>代码实现:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 创建一个对象</span></span></span><span class="line"><span class="javascript">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="actionscript">    <span class="comment">// 为创建的对象动态的添加username,age,info三个属性</span></span></span><span class="line"><span class="actionscript">    person.username = <span class="string">"zhangsan"</span>;</span></span><span class="line"><span class="undefined">    person.age = 30;</span></span><span class="line"><span class="actionscript">    person.info = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><span class="line"><span class="undefined">        </span></span><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.username + <span class="string">","</span> + <span class="keyword">this</span>.age);</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined">    person.info();</span></span><span class="line"><span class="undefined">    </span></span><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><p>总结：</p><p>1、事实上，如代码中注释所描述的那样，动态的为person这个对象添加了username、age和info属性，也可以这么说，为person对象动态添加了username，age属性和info方法。</p><p>2、这种方式是采用的是已经存在的Object去创建对象，这种方式我也称之为：<strong>基于已有对象扩充其属性和方法创建对象</strong>。</p><p>3、这种实现方式是非常简单的，就是基于已经存在的Object对象来去扩充其属性和方法，但是缺点也是很明显的，就是如果需要大量的同类对象就意味着大量的重复性的代码，效率不高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;JavaScript是一门面向对象的语言，自然呢就会不可避免的去创建对象，我呢会讲六种方式，本文主要讲解的是使用Object构造函数的方式创建对象。&lt;/p&gt;
&lt;p&gt;代码实现:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.manongedu.cn/tags/JavaScript/"/>
    
      <category term="创建对象" scheme="http://www.manongedu.cn/tags/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="Object" scheme="http://www.manongedu.cn/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>ipython的介绍及环境安装</title>
    <link href="http://www.manongedu.cn/ipython%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85.html"/>
    <id>http://www.manongedu.cn/ipython的介绍及环境安装.html</id>
    <published>2018-04-21T07:57:36.000Z</published>
    <updated>2018-04-21T08:30:45.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ipython介绍"><a href="#ipython介绍" class="headerlink" title="ipython介绍"></a>ipython介绍</h1><pre><code>我们知道在python的学习中有两种环境，一种是命令环境，一种是交互式环境。命令环境其实就是我们写好的程序保存一个**.py**的源文件中，而交互式环境则是我们每写好一个命令，实时的可以与python进行交互。实际上，python本身已经为我们提供了一个python的交互式环境，我们只需要输入python命令就可以了，但是这种方式对于我们开发来说，显然在功能上还是不够的。我们需要一种更强大的交互式环境来去开发我们的程序，而**ipython**则是解决这个问题的，这个ipython实际上是也是python的交互式shell，比默认提供的shell功能更强大，支持代码自动补全，自动缩进，而且同时也支持linux的命令。使用ipython则会高效率的开发我们的程序。</code></pre><h1 id="ipython的环境安装"><a href="#ipython的环境安装" class="headerlink" title="ipython的环境安装"></a>ipython的环境安装</h1><pre><code>** 第一步、下载ipython-6.0.0.tar.gz源码包**** 第二步、解压**    tar -zxvf ipython-6.0.0.tar.gz    cd ipython-6.0.0    python setup.py install** 第三步、创建软连接**    ln -s /usr/local/python3.6/bin/ipython /usr/bin/ipython** 第四步、测试是否安装成功**    ipython    输入此语句后,即可进入与python的交互的shell,在交互的模式下,可以输入linux命令。    eg:        [root@python3 bin]# ipython        /usr/local/python3.6/lib/python3.6/site-packages/IPython/core/history.py:227: UserWarning: IPython History requires SQLite, your history will not be saved        warn(&quot;IPython History requires SQLite, your history will not be saved&quot;)        Python 3.6.4 (default, Feb 22 2018, 23:45:37)        Type &apos;copyright&apos;, &apos;credits&apos; or &apos;license&apos; for more information        IPython 6.0.0 -- An enhanced Interactive Python. Type &apos;?&apos; for help.        In [1]: 1+1        Out[1]: 2        In [2]: pwd        Out[2]: &apos;/usr/bin&apos;        In [3]: quit经过以上四个步骤就可以实现在linux上如何安装ipython了，小伙伴们，加油吧！</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ipython介绍&quot;&gt;&lt;a href=&quot;#ipython介绍&quot; class=&quot;headerlink&quot; title=&quot;ipython介绍&quot;&gt;&lt;/a&gt;ipython介绍&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;我们知道在python的学习中有两种环境，一种是命令环境，一种是交互
      
    
    </summary>
    
      <category term="python" scheme="http://www.manongedu.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.manongedu.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python语言在linux环境下面的安装</title>
    <link href="http://www.manongedu.cn/python%E8%AF%AD%E8%A8%80%E5%9C%A8linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%9D%A2%E7%9A%84%E5%AE%89%E8%A3%85.html"/>
    <id>http://www.manongedu.cn/python语言在linux环境下面的安装.html</id>
    <published>2018-04-20T14:34:09.000Z</published>
    <updated>2018-04-20T16:02:52.663Z</updated>
    
    <content type="html"><![CDATA[<p>前言：</p><pre><code>在linux环境下安装python，网上也有很多的教程，但是总是千篇一律，今天我把我自己的安装过程给记录下来，有需要的朋友可以拿走。</code></pre><p>说明：</p><pre><code>    linux环境：Centos6.5python环境：python3.6.4</code></pre><p>开始安装：</p><p><strong>第一步：首先确定linux系统已经安装了gcc编译工具.</strong></p><pre><code>查看linux是否已经安装:rpm -q gcc，如果没有安装:yum -y install gcc gcc-c++ autoconf automake</code></pre><p><strong>第二步：确定linux系统是否已经安装了zlib,openssl,pcre</strong></p><pre><code>yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devl</code></pre><p><strong>第三步：将Python-3.6.4.tgz源代码包通过WinSCP上传至Centos6.5系统</strong></p><p><strong>第四步：安装</strong></p><pre><code>        # 解压该压缩包    tar -zxvf Python-3.6.4.tgz# 新建安装目录    mkdir /usr/local/python3.6# 进入要解压目录Python-3.6.4    cd Python-3.6.4# 安装    ./configure --prefix=/usr/local/python3.6    make    make install</code></pre><p><strong>第五步：让CentOS6.5系统默认使用python3.6.4</strong></p><pre><code>原因:在CentOS系统中默认是安装了python的,但是版本使用的是python2.6.6,这个时候就需要指定python新版本。# 查看python的安装位置    whereis python# 切换到bin命令目录    cd /usr/bin    mv python python2.6.bak   // 将当前python的版本是2.6,所以改为2.6    ln -s /usr/local/python3.6/bin/python3.6  /usr/bin/python# 在控制台输入python,则可以查看当前python的版本号(也可以输入python -V)</code></pre><p><strong>第六步：默认的python成功指向3.6以后，yum不能正常使用，需要修改yum的配置文件</strong></p><pre><code>原因: yum默认使用的是python2版本,所以当系统替换成python3版本的时候,就会导致yum不可用,如果想使用yum则必须要修改yum的配置文件# 修改yum配置文件    vim /usr/bin/yum将#!/usr/bin/python修改为#!/usr/bin/python2.6.bak(**这个文件名就是上面mv的时候重命名的python的名字**)保存退出就好。如果出现类似于以下错误:    File &quot;/usr/libexec/urlgrabber-ext-down&quot;,line 28        except OSError,e:                      ^    SyntaxError:invalid syntax则解决办法是:    修改vim /usr/libexec/urlgrabber-ext-down，将/usr/bin/python改为/usr/bin/python2.6.bak</code></pre><p><strong>第七步：配置iBus</strong></p><pre><code># 使用vim命令新建一个文件001_helloworld.py    print(&quot;hello,world&quot;)# 执行程序    python 001_helloworld.py</code></pre><p>经过上面的七个步骤，在linux环境上安装python就大功告成啦！开始我们的python之旅吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在linux环境下安装python，网上也有很多的教程，但是总是千篇一律，今天我把我自己的安装过程给记录下来，有需要的朋友可以拿走。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    linux环境：Cent
      
    
    </summary>
    
      <category term="python" scheme="http://www.manongedu.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.manongedu.cn/tags/python/"/>
    
      <category term="linux" scheme="http://www.manongedu.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>在springboot中如何开发全局日期类型转换器</title>
    <link href="http://www.manongedu.cn/%E5%9C%A8springboot%E4%B8%AD%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E5%85%A8%E5%B1%80%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8.html"/>
    <id>http://www.manongedu.cn/在springboot中如何开发全局日期类型转换器.html</id>
    <published>2018-04-20T07:05:49.000Z</published>
    <updated>2018-04-20T07:47:01.394Z</updated>
    
    <content type="html"><![CDATA[<p>当我们在开发Web应用程序的时候，往往通过填写好表单后再向后台发送数据，我们知道，对于在表单上填写的内容，不管是我们填写的是数字还是日期等等，其实都是String类型的，如果我们采用的是SpringMVC这样的web层的框架的时候，那么当我们后台程序接收到数据之后，对于简单的数据类型，比如说String，Long，Integer这样都是可以正常接收的，但是这里有一个例外，就是如果前台表单提交的字段有日期(Date)的时候，是无法接收的。这个原因是在于：<strong>String转换Date失败，需要我们自己写转换器进行转换</strong>。tips:==为什么会这样？我们可以想象一下，全世界每个国家表达的日期或许多多少少都有点差异性，既然存在这么多的查询，SpringMVC干脆想了，这个事情我不做了，做不了了，交给开发者来去根据自己国家的日期表达形式去实现了==。</p><p>好了，话不多说，直接贴出来后台代码：</p><p>1、实体Bean对象</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户实体</span></span><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><span class="line"></span><span class="line"><span class="comment">// 用户名称</span></span><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> username;</span><span class="line"></span><span class="line"><span class="comment">// 用户生日</span></span><span class="line"><span class="keyword">private</span> Date birthday;</span><span class="line"></span><span class="line"><span class="keyword">set</span>()....<span class="keyword">get</span>()... <span class="comment">// 省略</span></span><span class="line">&#125;</span></pre></td></tr></table></figure><p>2、编写我们的日期类型转换器</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日期类型转换器</span></span><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter2</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Converter</span></span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><span class="line"></span><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">String</span> DATE_FORMAT = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><span class="line"></span><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">String</span> SHORT_DATE_FORMAT = <span class="string">"yyyy-MM-dd"</span>;</span><span class="line"></span><span class="line"><span class="comment">// 实现转换</span></span><span class="line"><span class="keyword">public</span> Date convert(<span class="keyword">String</span> value) &#123;</span><span class="line"></span><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(value)) &#123;</span><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><span class="line">&#125;</span><span class="line"></span><span class="line">value = value.trim();</span><span class="line"></span><span class="line"><span class="keyword">try</span> &#123;</span><span class="line"><span class="keyword">if</span>(value.contains(<span class="string">"-"</span>))&#123;</span><span class="line"><span class="comment">// 表示采用的日期格式是以"-"表示的。eg: 2010-09-09</span></span><span class="line">SimpleDateFormat formatter;</span><span class="line"><span class="keyword">if</span> (value.contains(<span class="string">":"</span>)) &#123;</span><span class="line"><span class="comment">// 表示传入的时间是有时分秒的</span></span><span class="line">formatter = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(DATE_FORMAT);</span><span class="line">&#125;<span class="keyword">else</span>&#123;</span><span class="line"><span class="comment">// 表示传入的时间是没有时分秒的</span></span><span class="line">formatter = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(SHORT_DATE_FORMAT);</span><span class="line">&#125;</span><span class="line">Date dtDate = formatter.parse(value);</span><span class="line"><span class="keyword">return</span> dtDate;</span><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (value.matches(<span class="string">"^\\d+$"</span>)) &#123;</span><span class="line"><span class="comment">// 表示传入的是一串数字</span></span><span class="line">Long lDate = <span class="keyword">new</span> <span class="type">Long</span>(value);</span><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Date</span>(lDate);</span><span class="line">&#125;</span><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(<span class="keyword">String</span>.format(<span class="string">"parser %s to Date fail"</span>, value));</span><span class="line">&#125;</span><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(<span class="keyword">String</span>.format(<span class="string">"parser %s to Date fail"</span>, value));</span><span class="line">&#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>3、添加配置，注册我们自己定义好的日期类型转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConverterConfigBean</span> </span>&#123;</span><span class="line"></span><span class="line"><span class="meta">@Autowired</span></span><span class="line">    <span class="keyword">private</span> RequestMappingHandlerAdapter handlerAdapter;</span><span class="line"></span><span class="line"><span class="meta">@PostConstruct</span></span><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initEditableAvlidation</span><span class="params">()</span> </span>&#123;</span><span class="line"></span><span class="line">        ConfigurableWebBindingInitializer initializer = (ConfigurableWebBindingInitializer)handlerAdapter.getWebBindingInitializer();</span><span class="line">        <span class="keyword">if</span>(initializer.getConversionService()!=<span class="keyword">null</span>) &#123;</span><span class="line">            GenericConversionService genericConversionService = (GenericConversionService)initializer.getConversionService();           </span><span class="line">            </span><span class="line">            <span class="comment">// 注册日期类型转换器</span></span><span class="line">            genericConversionService.addConverter(<span class="keyword">new</span> StringToDateConverter());</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>4、经过我们自定义的日期类型转换和注册我们就可以实现在全局环境下，从页面上日期类型的String字符串到后台的日期类型的Date对象的自动转换了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我们在开发Web应用程序的时候，往往通过填写好表单后再向后台发送数据，我们知道，对于在表单上填写的内容，不管是我们填写的是数字还是日期等等，其实都是String类型的，如果我们采用的是SpringMVC这样的web层的框架的时候，那么当我们后台程序接收到数据之后，对于简单
      
    
    </summary>
    
      <category term="SpringMVC" scheme="http://www.manongedu.cn/categories/SpringMVC/"/>
    
      <category term="SpringBoot" scheme="http://www.manongedu.cn/categories/SpringMVC/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.manongedu.cn/tags/SpringBoot/"/>
    
      <category term="SpringMVC" scheme="http://www.manongedu.cn/tags/SpringMVC/"/>
    
  </entry>
  
</feed>
